{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Active Tigger ? ActiveTigger 1 is an text annotation web tool dedicated for computational social sciences. It is designed to assist exploration and model (BERT) fine-tuning to annotate text dataset relying on active learning. How to start ? First, you need to access a running instance : Deploy you local instance Get access to existing instance The current version is a refactor of R Shiny ActiveTigger app (Julien Boelaert & Etienne Ollion). Active Tigger name is a pun that draws on the similarity between the words 'Tagger' and 'Tigger.' \u21a9","title":"Home"},{"location":"#what-is-active-tigger","text":"ActiveTigger 1 is an text annotation web tool dedicated for computational social sciences. It is designed to assist exploration and model (BERT) fine-tuning to annotate text dataset relying on active learning.","title":"What is Active Tigger ?"},{"location":"#how-to-start","text":"First, you need to access a running instance : Deploy you local instance Get access to existing instance The current version is a refactor of R Shiny ActiveTigger app (Julien Boelaert & Etienne Ollion). Active Tigger name is a pun that draws on the similarity between the words 'Tagger' and 'Tigger.' \u21a9","title":"How to start ?"},{"location":"access/","text":"Get access An instance of Active Tigger is running on GENES servers with a GPU. The beta test phase started October 30, 2024 and will exstend until mid-June. The main aim is to report bugs and problems The secondary aim is to identify potential enhancements [!NOTE] During this phase, be informed that the service can evolved since the bugs will be integrated continuously. A mail will be send before any reset that could led to destroy data. Nevetheless, please take care to save your data. Who can access the service Researchers who have textual data to annotate Open source contributors who want to help on a scientific software All accounts will be reseted at the end of the beta test phase. Account without activity can be deactivated after 2 months. Please be aware that this is a test service, and we reserve the right to deactivate any account at our discretion. How to test Contact emilien.schultz AT ensae.fr to request access (please motivate your demand : precise your status and some elements of your research project) Upload data / annotate / train models and report bugs/problems with issues How to discuss With Github issues On our Discord canal (please request an invitation) User agreement Develop a user agreement.","title":"Get Access"},{"location":"access/#get-access","text":"An instance of Active Tigger is running on GENES servers with a GPU. The beta test phase started October 30, 2024 and will exstend until mid-June. The main aim is to report bugs and problems The secondary aim is to identify potential enhancements [!NOTE] During this phase, be informed that the service can evolved since the bugs will be integrated continuously. A mail will be send before any reset that could led to destroy data. Nevetheless, please take care to save your data.","title":"Get access"},{"location":"access/#who-can-access-the-service","text":"Researchers who have textual data to annotate Open source contributors who want to help on a scientific software All accounts will be reseted at the end of the beta test phase. Account without activity can be deactivated after 2 months. Please be aware that this is a test service, and we reserve the right to deactivate any account at our discretion.","title":"Who can access the service"},{"location":"access/#how-to-test","text":"Contact emilien.schultz AT ensae.fr to request access (please motivate your demand : precise your status and some elements of your research project) Upload data / annotate / train models and report bugs/problems with issues","title":"How to test"},{"location":"access/#how-to-discuss","text":"With Github issues On our Discord canal (please request an invitation)","title":"How to discuss"},{"location":"access/#user-agreement","text":"Develop a user agreement.","title":"User agreement"},{"location":"contributors/","text":"Contributors Scientific board \u00c9tienne Ollion Julien Boelaert Emma Bonutti Annina Claesson Arnault Chatelain Development \u00c9milien Schultz (CREST) Paul Girard (Ouestware) Jean-Baptiste Richardet Matthias Bussonnier L\u00e9o Mignot Feedbacks David Larousserie Funding DRARI \u00cele-de-France CREST @ IPP Prog\u00e9do How to contribute If you want to contribute to the codebase, please get in touch.","title":"Contributors"},{"location":"contributors/#contributors","text":"","title":"Contributors"},{"location":"contributors/#scientific-board","text":"\u00c9tienne Ollion Julien Boelaert Emma Bonutti Annina Claesson Arnault Chatelain","title":"Scientific board"},{"location":"contributors/#development","text":"\u00c9milien Schultz (CREST) Paul Girard (Ouestware) Jean-Baptiste Richardet Matthias Bussonnier L\u00e9o Mignot","title":"Development"},{"location":"contributors/#feedbacks","text":"David Larousserie","title":"Feedbacks"},{"location":"contributors/#funding","text":"DRARI \u00cele-de-France CREST @ IPP Prog\u00e9do","title":"Funding"},{"location":"contributors/#how-to-contribute","text":"If you want to contribute to the codebase, please get in touch.","title":"How to contribute"},{"location":"documentation/","text":"Documentation General comments Only one process allowed in the same time by user Create a project Prepare labels and features Explore the data Annotate Fine-tune a BERT model Test model The test set: - Created on the beginning of the project - Uploaded latter Once activated, the test mode : - Deactivate for the user the choice of scheme, label management - Allow only annotation for the test set - Allow to explore the test set Export data / models","title":"User Guide"},{"location":"documentation/#documentation","text":"","title":"Documentation"},{"location":"documentation/#general-comments","text":"Only one process allowed in the same time by user","title":"General comments"},{"location":"documentation/#create-a-project","text":"","title":"Create a project"},{"location":"documentation/#prepare-labels-and-features","text":"","title":"Prepare labels and features"},{"location":"documentation/#explore-the-data","text":"","title":"Explore the data"},{"location":"documentation/#annotate","text":"","title":"Annotate"},{"location":"documentation/#fine-tune-a-bert-model","text":"","title":"Fine-tune a BERT model"},{"location":"documentation/#test-model","text":"The test set: - Created on the beginning of the project - Uploaded latter Once activated, the test mode : - Deactivate for the user the choice of scheme, label management - Allow only annotation for the test set - Allow to explore the test set","title":"Test model"},{"location":"documentation/#export-data-models","text":"","title":"Export data / models"},{"location":"quickstart/","text":"Quickstart","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"software/","text":"Software characteristics Roadmap Calendar Experimental generative for April. Stable classical version planned for mid-June (+ Docker). Next Steps Multilabel workflow + bert-fine tuning Create Python wrapper Write documentation + tutorial Optimize vizualisation for large dataset \u2699 Create a easy/medium/pro mode need definition Define the monitor panel need definition Optimize GPU management (prediction) Enhancements Build Docker image \u2699 Integrate genAI tools \u2699 Add carbon count Add new models (Modernbert, Phi3, pleias, ...) Refactor design (better ergonomy / colors / etc.) \u2699 Better data set management (expand) Animate community on Discord Possibilities Attribute specific task to users Architecture This is a collection of technical points/choices for the app Overall architecture : backend : Python/FastAPI frontend : React/Typescript Backend config.yaml define the parameters at the server launch The unit is the project, composes of different classes Features Schemes Simplemodels Bertmodels Users CPU/GPU bound computation is managed in separated processes with a queue State of the service is checked at each request (with a threshold) Data management Tabular data is stored as separated parquet files divided in train / test / complete SQLite database to manage annotations/parameters/users/logs Projects are loaded into memory to facilitate computation (filter, etc.) Unloaded after one day Bert models are saved in dedicated filesystems Processes ProcessPoolExecutor with workers https://superfastpython.com/processpoolexecutor-in-python/ Different type of parallel process : training ; predicting Only one process possible by user/project Users role Role-Based Access Control (RBAC) - 3 roles : root, manager, annotator Authentification with OAuth2 and token in header Table of valid tokens A table of authorization defines the relation users/projects Different uses can modify a same project : no lock Select element to annotate The selection combines different strategy : filters and/or active learning. Active learning is a prediction with a model trained on already annotated data. Different modes of selection deterministic aleatory maxprob for a label max entropy Pipeline of choice sample (tagged, untagged, all) regex proba / entropie Frontend State management Each project is described by its general state (not user specific) Computed/computing elements","title":"Software"},{"location":"software/#software-characteristics","text":"","title":"Software characteristics"},{"location":"software/#roadmap","text":"","title":"Roadmap"},{"location":"software/#calendar","text":"Experimental generative for April. Stable classical version planned for mid-June (+ Docker).","title":"Calendar"},{"location":"software/#next-steps","text":"Multilabel workflow + bert-fine tuning Create Python wrapper Write documentation + tutorial Optimize vizualisation for large dataset \u2699 Create a easy/medium/pro mode need definition Define the monitor panel need definition Optimize GPU management (prediction)","title":"Next Steps"},{"location":"software/#enhancements","text":"Build Docker image \u2699 Integrate genAI tools \u2699 Add carbon count Add new models (Modernbert, Phi3, pleias, ...) Refactor design (better ergonomy / colors / etc.) \u2699 Better data set management (expand) Animate community on Discord","title":"Enhancements"},{"location":"software/#possibilities","text":"Attribute specific task to users","title":"Possibilities"},{"location":"software/#architecture","text":"This is a collection of technical points/choices for the app Overall architecture : backend : Python/FastAPI frontend : React/Typescript","title":"Architecture"},{"location":"software/#backend","text":"config.yaml define the parameters at the server launch The unit is the project, composes of different classes Features Schemes Simplemodels Bertmodels Users CPU/GPU bound computation is managed in separated processes with a queue State of the service is checked at each request (with a threshold)","title":"Backend"},{"location":"software/#data-management","text":"Tabular data is stored as separated parquet files divided in train / test / complete SQLite database to manage annotations/parameters/users/logs Projects are loaded into memory to facilitate computation (filter, etc.) Unloaded after one day Bert models are saved in dedicated filesystems","title":"Data management"},{"location":"software/#processes","text":"ProcessPoolExecutor with workers https://superfastpython.com/processpoolexecutor-in-python/ Different type of parallel process : training ; predicting Only one process possible by user/project","title":"Processes"},{"location":"software/#users-role","text":"Role-Based Access Control (RBAC) - 3 roles : root, manager, annotator Authentification with OAuth2 and token in header Table of valid tokens A table of authorization defines the relation users/projects Different uses can modify a same project : no lock","title":"Users role"},{"location":"software/#select-element-to-annotate","text":"The selection combines different strategy : filters and/or active learning. Active learning is a prediction with a model trained on already annotated data. Different modes of selection deterministic aleatory maxprob for a label max entropy Pipeline of choice sample (tagged, untagged, all) regex proba / entropie","title":"Select element to annotate"},{"location":"software/#frontend","text":"","title":"Frontend"},{"location":"software/#state-management","text":"Each project is described by its general state (not user specific) Computed/computing elements","title":"State management"},{"location":"usecases/","text":"Use cases Describe cases","title":"Use Cases"},{"location":"usecases/#use-cases","text":"Describe cases","title":"Use cases"}]}